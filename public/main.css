/*
 * Utilities
 * "Your collection of functions, mixins and anything else to make your life easier."
 */
/*
 * Theme Rules: https://smacss.com/book/type-theme
 * "It is probably self-evident but a theme defines colours and images that give your application or site its look and feel."
 *
 * Separating the theme out into its own set of styles allows for those styles to be easily redefined for alternate themes.
 */
/*
 * Base Rules: https://smacss.com/book/type-base
 * "The default styling for how that element should look in all occurrences on the page."
 *
 * Should only target elements using an element selector, a descendent selector, or a child selector, along with any pseudo-classes.
 * Use of class or ID selectors should be avoided.
 * Use of !important should be avoided. 
 */
/*
 * Layout Rules: https://smacss.com/book/type-layout
 * "There is a distinction between layouts dictating the major and minor components of a page. The major components are referred to as Layout styles."
 *
 * Generally, a Layout style only has a single selector: a single ID or class name.
 *
 * Use of !important should be avoided.
 * Use ID selectors sparingly and mindfully.
 * Prefix class names with l- (for example, .l-fixed and .l-grid).
 */
/*
 * Module Rules: https://smacss.com/book/type-module
 * "Each Module should be designed to exist as a standalone component."
 *
 * If done right, Modules can easily be moved to different parts of the layout without breaking.
 *
 * Module is a more discrete component of the page
 * modules are the more discrete components on the page (examples include components like navigation bars, widgets, alerts, and carousels).
 * modules live inside Layout components, but can also live inside other Module components.
 * modules should be designed to exist as standalone components and be portable.
 *
 * Use of !important should be avoided.
 * Use of IDs and element selectors should also be avoided; stick to using only class names.
 * Add class names to elements to increase the semantics of what those elements mean and remove any ambiguity.
 * Use child or descendant selectors only when element selectors will and can be predictable (for example, .module span).
 * Utilize sub-classing instead of referencing the parent element to reduce specificity (for example, .dialog-subclass vs #parent .dialog).
 * Module-specific state rules should include the module name in its class name (for example, .is-dialog-active versus .is-active).
 */
/*
 * State Rules: https://smacss.com/book/type-state
 * "A state is something that augments and overrides all other styles."
 * 
 * States are generally applied to the same element as a layout rule or applied to the same element as a base module class.
 * 
 * Use of !important is allowed, but only if it's absolutely necessary.
 * State rules should be global in nature. Module-specific state rules should live with the module rules. 
 * Prefix class names with is- (for example, .is-active and .is-collapsed).
 */
* {
  box-sizing: border-box;
  padding: 0; }
