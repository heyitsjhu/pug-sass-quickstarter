/*
 * Module Rules: https://smacss.com/book/type-module
 * "Each Module should be designed to exist as a standalone component."
 *
 * If done right, Modules can easily be moved to different parts of the layout without breaking.
 *
 * Module is a more discrete component of the page
 * modules are the more discrete components on the page (examples include components like navigation bars, widgets, alerts, and carousels).
 * modules live inside Layout components, but can also live inside other Module components.
 * modules should be designed to exist as standalone components and be portable.
 *
 * Use of !important should be avoided.
 * Use of IDs and element selectors should also be avoided; stick to using only class names.
 * Add class names to elements to increase the semantics of what those elements mean and remove any ambiguity.
 * Use child or descendant selectors only when element selectors will and can be predictable (for example, .module span).
 * Utilize sub-classing instead of referencing the parent element to reduce specificity (for example, .dialog-subclass vs #parent .dialog).
 * Module-specific state rules should include the module name in its class name (for example, .is-dialog-active versus .is-active).
 */
